<!--{
    "title":       "@module",
    "out":         "tags-module.html",
    "description": "Document a JavaScript module."
}-->
<h3>Syntax</h3>
<code>@module [[{&lt;type&gt;}] &lt;ModuleName&gt;]</code>
<p>Note: if you provide a type, you <em>must</em> also provide a name.</p>

<h3>Overview</h3>

<p>This marks the current file as being its own module. 
All symbols in the file are members of the module (unless documented otherwise, see (e.g.) <a href="tags-memberof.html">@memberof</a>).
</p>

<p>Link to a module (e.g. within a <a href="tags-link.html">@link</a> or <a href="tags-see.html">@see</a>) using "module:moduleName". For example, "@module foo/bar" can be linked to using "{@link module:foo/bar}".
</p>

<p>If the module name is not provided, it is set to the current filename relative to the folder JSDoc is run on.
</p>

<p>For example, suppose I have a file <code>test.js</code> with doclet <code>/** @module */</code> in it, in folder 'src'.
Here are some scenarios for running JSDoc and the resulting module names for test.js:
</p>

{{#example}}Derived module names if none is provided.
# from src/
jsdoc ./test.js   # module name 'test'

# from src's parent directory:
jsdoc src/test.js # module name 'src/test'
jsdoc -r src/     # module name 'test'
{{/example}}

<h3>Examples</h3>
{{#example}}Basic @module use.
/** @module myModule */

/** will be module:myMmodule~foo */
var foo = 1;
{{/example}}

There are many ways to export objects as belonging to a module (i.e. as static members rather than inner as in the example above). These include assigning the objects to <code>module.exports</code> or <code>exports</code> or <code>this</code>.

{{#example}}Using 'this' in a file with @module.
/** @module bookshelf */
/** @class */
this.Book = function (title) {
    /** The title. */
    this.title = title;
};
{{/example}}
<p>When a global symbol is a member of 'this' in a file with a @module tag, the symbol is documented as a member of that module.
So the Book class above is documented as <code>module:bookshelf.Book</code>. The title is <code>module:bookshelf.Book#title</code> as expected.
</p>

{{#example}}Documenting under a namespace 'module.exports' or 'exports'.
/** @module color/mixer */
module.exports = {
    /** Blend two colours together. */
    blend: function (color1, color2) {}
};
/** Darkens a color. */
exports.darken = function (color, shade) {};
{{/example}}
<p>JSDoc recognises assigning to <code>module.exports</code> or <code>exports</code> as assigning to the module.
Hence the two functions above will have names "module:color/mixer.blend" and "module:color/mixer.darken".
</p>

{{#example}}Module with a type
/** @module {Number} one */

/** This will be one.add. */
exports.add = function (n) { return n + 1; };
{{/example}}

See <a href="howto-commonjs-modules.html">Documenting Javascript Modules</a> for further examples of using @module as a constructor, or documenting multiple modules in a file.

<h3>See Also</h3>

<ul>
    <li><a href="howto-commonjs-modules.html">Other helpful @module examples</a></li>
    <li><a href="tags-exports.html">@exports</a></li>
    <li><a href="tags-namespace.html">@namespace</a></li>
</ul>
