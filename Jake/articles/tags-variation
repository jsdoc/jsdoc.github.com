<!--{
    "title":       "@variation",
    "out":         "tags-variation.html",
    "description": "Distinguish different objects with the same name."
}-->
<h3>Syntax</h3>
<code>@variation &lt;variationNumber&gt;</code>

<h3>Overview</h3>

<p>Sometimes there might be multiple different symbols with the same longname. For example, you might have both a global class and a namespace called <code>Foo</code>.
In cases such as these, what does "{@link Foo}" or "@memberof Foo" mean? The global namespace, or the global class?
</p>

<p>
Variations provide a way to distinguish between different objects with the same longname within JSDoc.
For example, if I add "@variation 2" to the class Foo's doclet, then "{@link Foo(2)}" will refer to the class Foo, and "{@link Foo}" will refer to the namespace Foo. The varation only exists at the documentation-level; in the generated output you will not see the "(2)" anywhere.
</p>

<p>
Alternatively, one can specify the variation while they specify the doclet's name, as in "@name Foo(2)".
</p>

<p>
All that is required is that the combination of the doclet's longname and its variation is unique (i.e. the @variation value should be different within all objects with the same longname).
</p>

<h3>Examples</h3>
<p>
In the below example, we have a global namespace <code>foo</code> and a global class <code>foo</code>.
We use variations to distinguish between the two.
</p>
{{#example}}Example
/** A namespace.
 * @namespace foo
 */
/** A global class.
 * @class foo
 * @variation 2
 */

/** A method in class foo (foo#classMethod). We need to use foo(2) in the memberof tag
 *  so JSDoc knows which foo we're talking about.
 * @method classMethod
 * @instance
 * @memberof foo(2)
 */
/** A function in the *namespace* foo (foo.namespaceMethod)
 * @method namespaceMethod
 * @memberof foo
 */
{{/example}}

<p>
The below example is the same as the previous, but takes use of JSDoc's naming mechanism to combine some of the tags (reduce the typing).
</p>

{{#example}}Example
/** A namespace.
 * @namespace foo
 */
/** A global class.
 * @class foo(2)
 */

/** A method in class foo (foo#classMethod). We need to use foo(2) in the memberof tag
 *  so JSDoc knows which foo we're talking about.
 * @method foo(2)#classMethod
 */
/** A function in the *namespace* foo (foo.namespaceMethod)
 * @method foo.namespaceMethod
 */
{{/example}}

